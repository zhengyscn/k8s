

lxc


## 主机级虚拟化：
Vmware
	- Type 1
		- 
	- Type 2
		- 
		
		
---------------------------
cgroup + namespace

## Docker arch
	- Docker daemon
	- Docker client
	- Docker registry


https://hub.docker.com

c/s

daemon -> unix/socket
	- ipv4
	- ipv6
	- file

- tcp
- unix/socket


## 企业版本
docker-ee

## 社区版本
docker-ce


## 依赖
CentOS 7
	
	
k8s 支持docker版本1.17


$ cd /etc/yum.repos.d/
$ wget https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo
$ vim docker-ce.repo
%s@@mirrors.tuna.tsinghua.edu.cn/docker-ce@



$ yum install docker-ce
$ mkdir /etc/docker
$ vim /etc/docker/daemon.json
$ ......


$ docker info
$ docker search nginx
$ docker images

## image
$ docker image pull nginx:1.14-alpine
$ docker pull busybox
$ docker image rm
$ docker rmi 
$ docker image ls
$ docker image ls --no-trunc


## 查看Docker的网络
$ docker network ls


$ docker run --name d1 -it busybox:latest
/ # mkdir /data/html
/ # echo "busybox httpd server." > /data/html/index.html
/ # httpd -f -h /data/html

$ docker inspect d1
$ curl 172.17.0.2

## 启动已停止的container
$ docker start -i -a d1

$ docker kill 
$ docker rm b1


$ docker run --name web1 -d nginx:1.14-alpine
$ docker inspect web1

$ docker run --name kvstore1 -d redis:4-alpine
$ docker exec -it kvstore1 /bin/sh


$ docker logs web1
$ docker logs kvstore1





--------------制作容器-------------------
$ docker commit -p t1 zhengyscn/httpd:v1.0-1
$ docker tag zhengyscn/httpd:v1.0-1 zhengyscn/httpd:latest
$ docker image rm zhengyscn/httpd:v1.0-1
$ docker commit -a "YanSheng Zheng <zhengyscn@gmail.com>" -c 'CMD ["/bin/httpd","-f","-h","/data/html"]' -p t1 zhengyscn/httpd:v2.0




$ docker exec -it t1 /bin/sh
/ # ps 











--------------------网络概述-------------------------

## 虚拟化网络
通过软件的方式实现
OVS：OpenVSwitch
	- vlan
	- vxlan
	- sdn


	
## Docker默认提供三种网络
- bridge
	桥接式网络，并不是物理桥，表示Nat桥；
	软交换机docker0， 充当网卡设备和交换设备；
- host
	让容器使用宿主机的网络名称空间
- none
	空、没有网络、只有lo接口；
	不需要网络通信的；

$ docker network ls


# yum install bridge-utils
$ brctl show





--------------------5. 容器网络-------------------------
$ docker run --name t1 -it --rm busybox:latest
$ docker run --name t1 -it --network bridge --rm busybox:latest
$ docker run --name t1 -it --network none --rm busybox:latest
$ docker run --name t1 -it -h t1-zhengyscn --network none --rm busybox:latest

-h --hostname HOSTNAME
--dns DNS_SERVER_IP
--dns-search
--add-host HOSTNAME:IP
-p
	# docker port b1
	-p 80   				# 动态端口
	-p 172.20.0.67::80		# 动态随机端口
	-p 80:80				# 指定宿主机端口映射
	-p 8080:80				# 指定宿主机端口映射



```
1. 主机名就是容器id
2. 启动时修改主机名-h t1.zhengyscn
```



# vim /etc/docker/daemon.json
{
	"hosts" : ["tcp://0.0.0.0:2375", "unix:///var/run/docker.sock"]
}
# systemctl stop/start/restart docker



## 执行远程主机的docker命令
docker -H 172.20.0.67:2375 ps


--------------------6. 容器存储卷-------------------------

## 宿主机 和 容器 卷映射
/data/web -> /container/data/web

## 持久存储
依赖共享存储


## 应用可以分为 有状态 和 无状态
有状态的：是指这次请求和上几次请求有关系的；
	- mysql
	- redis
	- tomcat
		- session -> memory -> kv system
无状态的：没有关联关系；
	- nginx
	- haproxy
	- lvs
	


## 有状态；无状态；需要存储；不需要存储；



只有有状态，存储卷是必须的；


Docker-managed volume
-v 选项即可使用volume
# docker run --name b1 --it -v /data busybox:latest

查看容器卷、卷标识及挂载主机目录
# docker inspect -f {{.Mounts}} b1


Bind-mount Volume
# docker run -it -v HOSTDIR:VOLUMEDIR --name b2 busybox:latest
# docker inspect -f {{.Mounts}} b2


## 复制网络
# docker run --name infracon -v /data/infracon/volume:/data/www/html busybox
# docker run --name nginx --network container:infracon --volume-from infracon -it busybox


--------------------Dockerfile-------------------------
## 容器编排

docker-compose 单机容器编排，自动为你做镜像；


传递变量


不建议修改配置文件，而是传环境变量；


Dockerfile
- 纯文本文件
- 指令 和 参数， 一般建议大写
- 注释信息
- 从上而下顺序执行；



1) 专用工作目录
2) 文件名首字母大写
3) 引用文件路径必须在当前目录内；
4) .dockeringore 隐藏文件
5) docker build xxx



https://github.com/docker-library





# yum info docker-registry
# yum install docker-registry.  (包名：docker-distribution)
# rpm -ql docker-distribution
/etc/docker-distribution/registry/config.yml         # 配置文件
/usr/bin/registry                                    # 主程序
/usr/lib/systemd/system/docker-distribution.service  # 启动服务
/usr/share/doc/docker-distribution-2.6.2
/usr/share/doc/docker-distribution-2.6.2/AUTHORS
/usr/share/doc/docker-distribution-2.6.2/CONTRIBUTING.md
/usr/share/doc/docker-distribution-2.6.2/LICENSE
/usr/share/doc/docker-distribution-2.6.2/MAINTAINERS
/usr/share/doc/docker-distribution-2.6.2/README.md
/var/lib/registry 
                                   # 数据目录
# systemctl start docker-distribution
# netstat -tnlp  | grep 5000
tcp6       0      0 :::5000                 :::*                    LISTEN      18599/registry


# docker tag zhengyscn/busybox:v0.5 10.13.128.229:5000/zhengyscn/busybox:v0.5
# docker push 10.13.128.229:5000/zhengyscn/busybox
The push refers to repository [10.13.128.229:5000/zhengyscn/busybox]
Get https://10.13.128.229:5000/v2/: http: server gave HTTP response to HTTPS client
# cat /etc/docker/daemon.json 
{
    "registry-mirrors": ["https://registry.docker-cn.com"]
    "insecure-registries" : [“10.13.128.229:5000”]
}
# systemctl start docker.service
# docker push 10.13.128.229:5000/zhengyscn/busybox
The push refers to repository [10.13.128.229:5000/zhengyscn/busybox]
62cb1cd4edb5: Pushed 
8a788232037e: Pushed 
# ll /var/lib/registry/
总用量 0
drwxr-xr-x. 3 root root 22 12月 22 12:04 docker





--------------------Registry-------------------------

## harbor
https://github.com/goharbor/harbor
https://github.com/goharbor/harbor/releases

$ wget https://storage.googleapis.com/harbor-releases/release-1.7.0/harbor-offline-installer-v1.7.0.tgz
$ tar -xf harbor-offline-installer-v1.7.0.tgz -C /usr/local/
$ cd /usr/local/harbor/
$ vim harbor.cfg
# yum install epee-release
# yum info docker-compose
# yum install docker-compose
# ./install.sh
✔ ----Harbor has been installed and started successfully.----

Now you should be able to visit the admin portal at http://10.13.128.229 . 
For more details, please visit https://github.com/goharbor/harbor .

# netstat -tnlp | grep docker
tcp        0      0 127.0.0.1:1514          0.0.0.0:*               LISTEN      23035/docker-proxy  
tcp6       0      0 :::443                  :::*                    LISTEN      23912/docker-proxy  
tcp6       0      0 :::4443                 :::*                    LISTEN      23900/docker-proxy  
tcp6       0      0 :::80                   :::*                    LISTEN      23924/docker-proxy


harbor基本操作
# cd /usr/local/harbor
# docker-compose pause
# docker-compose unpause
# docker-compose start
# docker-compose stop

浏览器访问Web服务
http://x.x.x.x:80
> admin
> Harbor12345


--------------------Docker资源限制级验证-------------------------





















































































































		